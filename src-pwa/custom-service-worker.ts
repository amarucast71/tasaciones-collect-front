/*
 * This file (which will be your service worker)
 * is picked up by the build system ONLY if
 * quasar.config file > pwa > workboxMode is set to "InjectManifest"
 */

declare const self: ServiceWorkerGlobalScope &
  typeof globalThis & { skipWaiting: () => void };

import { clientsClaim } from 'workbox-core';
import {
  precacheAndRoute,
  cleanupOutdatedCaches,
  createHandlerBoundToURL,
} from 'workbox-precaching';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
// import { CacheFirst, NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';


import { registerRoute, NavigationRoute } from 'workbox-routing';

self.skipWaiting();
clientsClaim();

// Use with precache injection
precacheAndRoute(self.__WB_MANIFEST);

cleanupOutdatedCaches();

// Non-SSR fallbacks to index.html
// Production SSR fallbacks to offline.html (except for dev)
// if (process.env.MODE !== 'ssr' || process.env.PROD) {
if (process.env.MODE !== 'ssr' || process.env.DEV || process.env.PROD) {
  registerRoute(
    new NavigationRoute(
      createHandlerBoundToURL(process.env.PWA_FALLBACK_HTML),
      { denylist: [new RegExp(process.env.PWA_SERVICE_WORKER_REGEX), /workbox-(.)*\.js$/] }
    )
  );

  // OpenStreetMap - Cache First strategy
  registerRoute(
    ({ url }) => url.host.startsWith('a.tile.openstreetmap.org'),
    new CacheFirst({
      cacheName: 'osm',
      plugins: [
        new ExpirationPlugin({ maxEntries: 5000 }),
        new CacheableResponsePlugin({ statuses: [0, 200] })
      ]
    })
  );

  // // API routes - Network First strategy for latest data, falling back to cache
  registerRoute(
    ({ url }) => url.pathname.includes('/tasaciones/main/api/v1/'),
    new NetworkFirst({
      cacheName: 'api',
      plugins: [
        new ExpirationPlugin({ maxEntries: 5000 }),
        new CacheableResponsePlugin({ statuses: [0, 200] })
      ]
    })
  );

  registerRoute(
    ({ url }) => url.pathname.includes('/tasaciones/main/mvt/'),
    new NetworkFirst({
      cacheName: 'mvt',
      plugins: [
        new ExpirationPlugin({ maxEntries: 5000 }),
        new CacheableResponsePlugin({ statuses: [0, 200] })
      ]
    })
  );
}




// import { precacheAndRoute } from 'workbox-precaching';
// import { registerRoute } from 'workbox-routing';
// import { CacheFirst, NetworkOnly, NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';
// import { ExpirationPlugin } from 'workbox-expiration';
// import { CacheableResponsePlugin } from 'workbox-cacheable-response';
// import { BackgroundSyncPlugin } from 'workbox-background-sync';
//
// // Precache all of the assets generated by the build process
// precacheAndRoute(self.__WB_MANIFEST);
//
// // Skip waiting
// self.addEventListener('install', (event) => {
//   self.skipWaiting();
// });
//
// // Background Sync Plugin for offline API requests
// const bgSyncPlugin = new BackgroundSyncPlugin('createRelevamiento');
//
// // API route - Network only with Background Sync
// registerRoute(
//   ({ url }) => url.pathname.endsWith('relevamientos'),
//   new NetworkOnly({ plugins: [bgSyncPlugin] }),
//   'POST'
// );
//
// // Google Maps and other geospatial data routes - Cache First strategy
// registerRoute(
//   ({ url }) => url.host.startsWith('maps.googleapis') || url.pathname.includes('vt/lyrs'),
//   new CacheFirst({
//     cacheName: 'google-maps',
//     plugins: [
//       new ExpirationPlugin({ maxEntries: 3000 }),
//       new CacheableResponsePlugin({ statuses: [0, 200] })
//     ]
//   })
// );
//
// // Your custom GIS API route - Cache First strategy
// registerRoute(
//   ({ url }) => url.pathname.startsWith('/main/api/v1/gis/'),
//   new CacheFirst({
//     cacheName: 'mapas-ws',
//     plugins: [
//       new ExpirationPlugin({ maxEntries: 3000 }),
//       new CacheableResponsePlugin({ statuses: [0, 200] })
//     ]
//   })
// );
//
// // API routes - Network First strategy for latest data, falling back to cache
// registerRoute(
//   ({ url }) => url.pathname.startsWith('/main/api/v1/'),
//   new NetworkFirst({
//     cacheName: 'api',
//     plugins: [
//       new ExpirationPlugin({ maxEntries: 3000 }),
//       new CacheableResponsePlugin({ statuses: [0, 200] })
//     ]
//   })
// );
//
// // Fallback for other requests
// registerRoute(
//   ({ url }) => url.href.startsWith('http'),
//   new StaleWhileRevalidate()
// );
//
